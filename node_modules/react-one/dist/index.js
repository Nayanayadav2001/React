'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Context = React.createContext();

var Provider = function (_React$Component) {
  inherits(Provider, _React$Component);

  function Provider(props) {
    classCallCheck(this, Provider);

    var _this = possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).call(this, props));

    _this.state = _extends({}, props.initialState);
    return _this;
  }

  createClass(Provider, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(
        Context.Provider,
        {
          value: {
            state: this.state,
            setState: function setState(data, callback) {
              return _this2.setState((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' ? _extends({}, _this2.state, data) : data, function () {
                var onSetState = _this2.props.onSetState;

                onSetState && onSetState(_this2.state);
                typeof callback === 'function' && callback(_this2.state);
              });
            }
          }
        },
        this.props.children
      );
    }
  }]);
  return Provider;
}(React.Component);

Provider.propTypes = { initialState: PropTypes.object, onSetState: PropTypes.func };
Provider.defaultPropTypes = { initialState: {} };
var connect = function connect(Component) {
  return function (props) {
    return React.createElement(
      Context.Consumer,
      null,
      function (value) {
        return React.createElement(Component, _extends({}, props, value));
      }
    );
  };
};

exports.Provider = Provider;
exports.connect = connect;
